        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://Unit Test 2
        -:    2://Testing: testCompare()
        -:    3:
        -:    4:/* Original Function
        -:    5:
        -:    6:int compare(const void* a, const void* b) {
        -:    7:  if (*(int*)a > *(int*)b)
        -:    8:    return 1;
        -:    9:  if (*(int*)a < *(int*)b)
        -:   10:    return -1;
        -:   11:  return 0;
        -:   12:}
        -:   13:
        -:   14:*/
        -:   15:#include <stdlib.h>
        -:   16:#include <stdio.h>
        -:   17:#include "dominion.h"
        -:   18:#include "dominion_helpers.h"
        -:   19:
        1:   20:void testCompare()
        -:   21:{
        1:   22:  int highVal = 100;
        1:   23:  int lowVal = -100;
        1:   24:  int MaxInt = 2147483647;
        1:   25:  int MinInt = -2147483648;
        -:   26:  
        -:   27:  //compare high value to low value, positive to negative
        1:   28:  if (compare(&highVal, &lowVal) == 1)
        1:   29:    printf("compare function: PASS - High Value > Low Value \n");
        -:   30:  else
    #####:   31:    printf("compare function: FAIL - High Value < Low Value \n");
        -:   32:
        -:   33://compare low value to high value, negative to positive
        1:   34:  if (compare(&lowVal, &highVal) == -1)
        1:   35:    printf("compare function: PASS - Low Value < High Value \n");
        -:   36:  else
    #####:   37:    printf("compare function: FAIL High Value > Low Value \n");
        -:   38: 
        -:   39: //compare max integer value to min integer value
        1:   40:  if (compare(&MaxInt, &MinInt) == 1)
        1:   41:    printf("compare function: PASS - High Value > Low Value \n");
        -:   42:  else
    #####:   43:    printf("compare function: FAIL - High Value < Low Value \n");
        -:   44: 
        -:   45: //compare identical values
        1:   46:  if (compare(&highVal, &highVal) == 1)
    #####:   47:    printf("compare function: PASS - High Value = High Value \n");
        -:   48:  else
        1:   49:    printf("compare function: FAIL - High Value != High Value \n");
        -:   50:    
        1:   51:}
        -:   52:
        -:   53:
        1:   54:int main(int argc, char * argv[])
        -:   55:{
        -:   56:  
        1:   57:  testCompare();
        1:   58:  return 0;
        -:   59:}
