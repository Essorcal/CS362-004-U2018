        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://Unit Test 3
        -:    2://Testing: testBuyCard()
        -:    3:
        -:    4:/* Original Function
        -:    5:
        -:    6:int buyCard(int supplyPos, struct gameState *state) {
        -:    7:  int who;
        -:    8:  if (DEBUG){
        -:    9:    printf("Entering buyCard...\n");
        -:   10:  }
        -:   11:
        -:   12:  // I don't know what to do about the phase thing.
        -:   13:
        -:   14:  who = state->whoseTurn;
        -:   15:
        -:   16:  if (state->numBuys < 1){
        -:   17:    if (DEBUG)
        -:   18:      printf("You do not have any buys left\n");
        -:   19:    return -1;
        -:   20:  } else if (supplyCount(supplyPos, state) <1){
        -:   21:    if (DEBUG)
        -:   22:      printf("There are not any of that type of card left\n");
        -:   23:    return -1;
        -:   24:  } else if (state->coins < getCost(supplyPos)){
        -:   25:    if (DEBUG) 
        -:   26:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        -:   27:    return -1;
        -:   28:  } else {
        -:   29:    state->phase=1;
        -:   30:    //state->supplyCount[supplyPos]--;
        -:   31:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:   32:  
        -:   33:    state->coins = (state->coins) - (getCost(supplyPos));
        -:   34:    state->numBuys--;
        -:   35:    if (DEBUG)
        -:   36:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:   37:  }
        -:   38:
        -:   39:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:   40:  //state->discardCount[who]++;
        -:   41:    
        -:   42:  return 0;
        -:   43:}
        -:   44:
        -:   45:*/
        -:   46:
        -:   47:#include <stdio.h>
        -:   48:#include <stdlib.h>
        -:   49:#include "dominion.h"
        -:   50:#include "dominion_helpers.h"
        -:   51:#include <string.h>
        -:   52:
        -:   53:
        1:   54:void testBuyCard(){
        -:   55:	
        -:   56:
        1:   57:	struct gameState *state = (struct gameState *) malloc (sizeof(struct gameState));
        -:   58:
        1:   59:	state->numBuys = 0;
        1:   60:	if (buyCard(smithy, state) == -1)
        -:   61:	{
        1:   62:		printf("buyCard function: PASS when no action is available\n");
        -:   63:	} else {
    #####:   64:		printf("buyCard function: FAIL bought card when no action is available\n");
        -:   65:	}	
        1:   66:	state->numBuys = 1;
        1:   67:	state->supplyCount[smithy] = 0;
        1:   68:	if (buyCard(smithy, state) == -1)
        -:   69:	{
        1:   70:		printf("buyCard function: PASS when no cards are in the stockpile \n");
        -:   71:	} else {
    #####:   72:		printf("buyCard function: FAIL bought card that was not available \n");
        -:   73:	}
        1:   74:	state->numBuys = 1;
        1:   75:	state->coins = 1;
        1:   76:	state->supplyCount[smithy] = 1;
        1:   77:	if (buyCard(smithy, state) == -1)
        -:   78:	{
        1:   79:		printf("buyCard function: PASS when insufficients funds to purchase \n");
        -:   80:	} else {
    #####:   81:		printf("buyCard function: FAIL bought card with insufficient coins \n");
        -:   82:	}
        1:   83:	state->numBuys = 1;
        1:   84:	state->coins = 4;
        1:   85:	state->supplyCount[smithy] = 1;
        1:   86:	state->whoseTurn = 0;
        1:   87:	if (buyCard(smithy, state) == 0 && state->coins == 0 && state->numBuys == 0 && state->supplyCount[smithy] == 0)
        -:   88:	{			
        1:   89:		printf("buyCard function: PASS Successfully bought card\n");
        -:   90:	} else {
    #####:   91:		printf("buyCard function: FAIL Did not buy card\n");
        -:   92:	}
        1:   93:}
        -:   94:
        -:   95:
        1:   96:int main(){
        1:   97:	testBuyCard();
        1:   98:	return 0;
        -:   99:}
